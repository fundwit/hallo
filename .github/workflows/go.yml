name: Go

on: push

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go mod download

    - name: Test
      run: |
        curl -fL -o pact.tar.gz https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.85.0/pact-1.85.0-linux-x86_64.tar.gz
        tar xf pact.tar.gz
        export PATH=$PATH:`pwd`/pact/bin
        export PACT_BROKER_USERNAME=${{secrets.PACT_BROKER_USERNAME}}
        export PACT_BROKER_PASSWORD=${{secrets.PACT_BROKER_PASSWORD}}

        echo $PATH
        ls -lh `pwd`/pact/bin

        pact-provider-verifier version

        docker run -d -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 mysql:5.7

        go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
        bash <(curl -s https://codecov.io/bash)

    - name: Generte Build Info File
      run:  |
        timestamp=$(TZ='Asia/Shanghai' date -d today +"%Y-%m-%dT%H:%M:%S+08:00")
        echo "BUILD_TIMESTAMP=${timestamp}" >> $GITHUB_ENV

        cat >> .docker/buildInfo.json <<EOF
        {
          "buildTime": "${timestamp}",
          "version": "${GITHUB_SHA}",
          "sourceCodes": [{
            "repository": "${GITHUB_REPOSITORY}",
            "ref": "${GITHUB_REF}",
            "reversion": {
              "id": "${GITHUB_SHA}",
              "author": "",
              "message": "",
              "timestamp": "0000-01-01T00:00:00Z"
            }
          }]
        }
        EOF
        cat .docker/buildInfo.json

    - name: Build
      run: |
        go build -v .
        mv hallo .docker/

    - name: Build and push Docker images
      env:
        SHOULD_PUBLISH: ${{ github.event_name == 'push' && github.event.ref == 'refs/heads/master' }}
      run: |
        echo '' >> .docker/Dockerfile
        echo "LABEL build.version="${GITHUB_SHA}" build.timestamp="${BUILD_TIMESTAMP}" build.source.repository="${GITHUB_REPOSITORY}" build.source.ref="${GITHUB_REF}" build.source.reversion="${GITHUB_SHA}"" >> .docker/Dockerfile
        cat .docker/Dockerfile

        registry=registry.cn-beijing.aliyuncs.com
        imageName="${registry}/fundwit/hallo:${GITHUB_SHA}"
        echo "image name: $imageName"
        echo "IMAGE_NAME=${imageName}" >> $GITHUB_ENV

        docker build -t $imageName .docker

        if [ "${SHOULD_PUBLISH}" == 'true' ]; then
           docker login -u ${{secrets.ALIYUN_REGISTRY_USERNAME}} -p ${{secrets.ALIYUN_REGISTRY_TOKEN}} $registry
           docker push $imageName
        fi

    - name: deploy
      if: ${{ github.event_name == 'push' && github.event.ref == 'refs/heads/master' }}
      uses: stefanprodan/kube-tools@v1.5.0
      with:
        command:  |
          mkdir -p ~/.kube
          cat >> ~/.kube/config <<EOF
          ${{secrets.FUNDWIT_DEPLOY_KUBECONFIG}}
          EOF
          kubectl set image deployment/hallo hallo=${IMAGE_NAME} --record
        
